/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['express/utils.js']) {
  _$jscoverage['express/utils.js'] = [];
  _$jscoverage['express/utils.js'][22] = 0;
  _$jscoverage['express/utils.js'][23] = 0;
  _$jscoverage['express/utils.js'][37] = 0;
  _$jscoverage['express/utils.js'][38] = 0;
  _$jscoverage['express/utils.js'][54] = 0;
  _$jscoverage['express/utils.js'][55] = 0;
  _$jscoverage['express/utils.js'][56] = 0;
  _$jscoverage['express/utils.js'][57] = 0;
  _$jscoverage['express/utils.js'][62] = 0;
  _$jscoverage['express/utils.js'][63] = 0;
  _$jscoverage['express/utils.js'][64] = 0;
  _$jscoverage['express/utils.js'][66] = 0;
  _$jscoverage['express/utils.js'][67] = 0;
  _$jscoverage['express/utils.js'][71] = 0;
  _$jscoverage['express/utils.js'][73] = 0;
  _$jscoverage['express/utils.js'][75] = 0;
}
_$jscoverage['express/utils.js'][22]++;
exports.miniMarkdown = (function (str) {
  _$jscoverage['express/utils.js'][23]++;
  return String(str).replace(/(__|\*\*)(.*?)\1/g, "<strong>$2</strong>").replace(/(_|\*)(.*?)\1/g, "<em>$2</em>").replace(/\[([^\]]+)\]\(([^)]+)\)/g, "<a href=\"$2\">$1</a>");
});
_$jscoverage['express/utils.js'][37]++;
exports.htmlEscape = (function (html) {
  _$jscoverage['express/utils.js'][38]++;
  return String(html).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
});
_$jscoverage['express/utils.js'][54]++;
exports.parseRange = (function (size, str) {
  _$jscoverage['express/utils.js'][55]++;
  var valid = true;
  _$jscoverage['express/utils.js'][56]++;
  var arr = str.substr(6).split(",").map((function (range) {
  _$jscoverage['express/utils.js'][57]++;
  var range = range.split("-"), start = parseInt(range[0], 10), end = parseInt(range[1], 10);
  _$jscoverage['express/utils.js'][62]++;
  if (isNaN(start)) {
    _$jscoverage['express/utils.js'][63]++;
    start = size - end;
    _$jscoverage['express/utils.js'][64]++;
    end = size - 1;
  }
  else {
    _$jscoverage['express/utils.js'][66]++;
    if (isNaN(end)) {
      _$jscoverage['express/utils.js'][67]++;
      end = size - 1;
    }
  }
  _$jscoverage['express/utils.js'][71]++;
  if (isNaN(start) || isNaN(end) || start > end) {
    _$jscoverage['express/utils.js'][71]++;
    valid = false;
  }
  _$jscoverage['express/utils.js'][73]++;
  return ({start: start, end: end});
}));
  _$jscoverage['express/utils.js'][75]++;
  return valid? arr: undefined;
});
_$jscoverage['express/utils.js'].source = ["","/*!"," * Express - Utils"," * Copyright(c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;"," * MIT Licensed"," */","","/**"," * Parse mini markdown implementation."," * The following conversions are supported,"," * primarily for the \"flash\" middleware:"," *"," *    _foo_ or *foo* become &lt;em&gt;foo&lt;/em&gt;"," *    __foo__ or **foo** become &lt;strong&gt;foo&lt;/strong&gt;"," *    [A](B) becomes &lt;a href=\"B\"&gt;A&lt;/a&gt;"," *"," * @param {String} str"," * @return {String}"," * @api private"," */","","exports.miniMarkdown = function(str){","  return String(str)","    .replace(/(__|\\*\\*)(.*?)\\1/g, '&lt;strong&gt;$2&lt;/strong&gt;')","    .replace(/(_|\\*)(.*?)\\1/g, '&lt;em&gt;$2&lt;/em&gt;')","    .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '&lt;a href=\"$2\"&gt;$1&lt;/a&gt;');","};","","/**"," * Escape special characters in the given string of html."," *"," * @param  {String} html"," * @return {String}"," * @api private"," */","","exports.htmlEscape = function(html) {","  return String(html)","    .replace(/&amp;/g, '&amp;amp;')","    .replace(/\"/g, '&amp;quot;')","    .replace(/&lt;/g, '&amp;lt;')","    .replace(/&gt;/g, '&amp;gt;');","};","","/**"," * Parse \"Range\" header `str` relative to the given file `size`."," *"," * @param {Number} size"," * @param {String} str"," * @return {Array}"," * @api private"," */","","exports.parseRange = function(size, str){","  var valid = true;","  var arr = str.substr(6).split(',').map(function(range){","    var range = range.split('-')","      , start = parseInt(range[0], 10)","      , end = parseInt(range[1], 10);","","    // -500","    if (isNaN(start)) {","      start = size - end;","      end = size - 1;","    // 500-","    } else if (isNaN(end)) {","      end = size - 1;","    }","","    // Invalid","    if (isNaN(start) || isNaN(end) || start &gt; end) valid = false;","","    return { start: start, end: end };","  });","  return valid ? arr : undefined;","};"];
