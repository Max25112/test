/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['express/view.js']) {
  _$jscoverage['express/view.js'] = [];
  _$jscoverage['express/view.js'][12] = 0;
  _$jscoverage['express/view.js'][26] = 0;
  _$jscoverage['express/view.js'][34] = 0;
  _$jscoverage['express/view.js'][42] = 0;
  _$jscoverage['express/view.js'][52] = 0;
  _$jscoverage['express/view.js'][53] = 0;
  _$jscoverage['express/view.js'][64] = 0;
  _$jscoverage['express/view.js'][65] = 0;
  _$jscoverage['express/view.js'][83] = 0;
  _$jscoverage['express/view.js'][84] = 0;
  _$jscoverage['express/view.js'][116] = 0;
  _$jscoverage['express/view.js'][117] = 0;
  _$jscoverage['express/view.js'][140] = 0;
  _$jscoverage['express/view.js'][141] = 0;
  _$jscoverage['express/view.js'][144] = 0;
  _$jscoverage['express/view.js'][145] = 0;
  _$jscoverage['express/view.js'][149] = 0;
  _$jscoverage['express/view.js'][150] = 0;
  _$jscoverage['express/view.js'][151] = 0;
  _$jscoverage['express/view.js'][152] = 0;
  _$jscoverage['express/view.js'][153] = 0;
  _$jscoverage['express/view.js'][156] = 0;
  _$jscoverage['express/view.js'][160] = 0;
  _$jscoverage['express/view.js'][165] = 0;
  _$jscoverage['express/view.js'][166] = 0;
  _$jscoverage['express/view.js'][169] = 0;
  _$jscoverage['express/view.js'][174] = 0;
  _$jscoverage['express/view.js'][175] = 0;
  _$jscoverage['express/view.js'][176] = 0;
  _$jscoverage['express/view.js'][178] = 0;
  _$jscoverage['express/view.js'][179] = 0;
  _$jscoverage['express/view.js'][180] = 0;
  _$jscoverage['express/view.js'][181] = 0;
  _$jscoverage['express/view.js'][182] = 0;
  _$jscoverage['express/view.js'][183] = 0;
  _$jscoverage['express/view.js'][184] = 0;
  _$jscoverage['express/view.js'][185] = 0;
  _$jscoverage['express/view.js'][186] = 0;
  _$jscoverage['express/view.js'][188] = 0;
  _$jscoverage['express/view.js'][190] = 0;
  _$jscoverage['express/view.js'][191] = 0;
  _$jscoverage['express/view.js'][192] = 0;
  _$jscoverage['express/view.js'][193] = 0;
  _$jscoverage['express/view.js'][194] = 0;
  _$jscoverage['express/view.js'][196] = 0;
  _$jscoverage['express/view.js'][199] = 0;
  _$jscoverage['express/view.js'][225] = 0;
  _$jscoverage['express/view.js'][227] = 0;
  _$jscoverage['express/view.js'][228] = 0;
  _$jscoverage['express/view.js'][231] = 0;
  _$jscoverage['express/view.js'][237] = 0;
  _$jscoverage['express/view.js'][240] = 0;
  _$jscoverage['express/view.js'][241] = 0;
  _$jscoverage['express/view.js'][245] = 0;
  _$jscoverage['express/view.js'][257] = 0;
  _$jscoverage['express/view.js'][258] = 0;
  _$jscoverage['express/view.js'][262] = 0;
  _$jscoverage['express/view.js'][265] = 0;
  _$jscoverage['express/view.js'][266] = 0;
  _$jscoverage['express/view.js'][270] = 0;
  _$jscoverage['express/view.js'][271] = 0;
  _$jscoverage['express/view.js'][275] = 0;
  _$jscoverage['express/view.js'][280] = 0;
  _$jscoverage['express/view.js'][281] = 0;
  _$jscoverage['express/view.js'][284] = 0;
  _$jscoverage['express/view.js'][286] = 0;
  _$jscoverage['express/view.js'][287] = 0;
  _$jscoverage['express/view.js'][288] = 0;
  _$jscoverage['express/view.js'][289] = 0;
  _$jscoverage['express/view.js'][290] = 0;
  _$jscoverage['express/view.js'][292] = 0;
  _$jscoverage['express/view.js'][293] = 0;
  _$jscoverage['express/view.js'][302] = 0;
  _$jscoverage['express/view.js'][306] = 0;
  _$jscoverage['express/view.js'][309] = 0;
  _$jscoverage['express/view.js'][310] = 0;
  _$jscoverage['express/view.js'][313] = 0;
  _$jscoverage['express/view.js'][314] = 0;
  _$jscoverage['express/view.js'][315] = 0;
  _$jscoverage['express/view.js'][317] = 0;
  _$jscoverage['express/view.js'][322] = 0;
  _$jscoverage['express/view.js'][323] = 0;
  _$jscoverage['express/view.js'][325] = 0;
  _$jscoverage['express/view.js'][329] = 0;
  _$jscoverage['express/view.js'][332] = 0;
  _$jscoverage['express/view.js'][333] = 0;
  _$jscoverage['express/view.js'][335] = 0;
  _$jscoverage['express/view.js'][339] = 0;
  _$jscoverage['express/view.js'][340] = 0;
  _$jscoverage['express/view.js'][341] = 0;
  _$jscoverage['express/view.js'][342] = 0;
  _$jscoverage['express/view.js'][343] = 0;
  _$jscoverage['express/view.js'][344] = 0;
  _$jscoverage['express/view.js'][345] = 0;
  _$jscoverage['express/view.js'][346] = 0;
  _$jscoverage['express/view.js'][347] = 0;
  _$jscoverage['express/view.js'][349] = 0;
}
_$jscoverage['express/view.js'][12]++;
var extname = require("path").extname, utils = require("connect").utils, http = require("http"), fs = require("fs"), mime = utils.mime;
_$jscoverage['express/view.js'][26]++;
var cache = {};
_$jscoverage['express/view.js'][34]++;
var viewCache = {};
_$jscoverage['express/view.js'][42]++;
var viewNameCache = {};
_$jscoverage['express/view.js'][52]++;
function cacheViewSync(path) {
  _$jscoverage['express/view.js'][53]++;
  return viewCache[path] = fs.readFileSync(path, "utf8");
}
_$jscoverage['express/view.js'][64]++;
function viewRoot(app) {
  _$jscoverage['express/view.js'][65]++;
  return app.set("views") || process.cwd() + "/views";
}
_$jscoverage['express/view.js'][83]++;
function objectName(view) {
  _$jscoverage['express/view.js'][84]++;
  return view.split("/").slice(-1)[0].split(".")[0];
}
_$jscoverage['express/view.js'][116]++;
exports.register = (function (ext, exports) {
  _$jscoverage['express/view.js'][117]++;
  cache[ext] = exports;
});
_$jscoverage['express/view.js'][140]++;
http.ServerResponse.prototype.partial = (function (view, options, ext, locals) {
  _$jscoverage['express/view.js'][141]++;
  locals = locals || {};
  _$jscoverage['express/view.js'][144]++;
  if (ext && view.indexOf(".") < 0) {
    _$jscoverage['express/view.js'][145]++;
    view += ext;
  }
  _$jscoverage['express/view.js'][149]++;
  if (options) {
    _$jscoverage['express/view.js'][150]++;
    if ("length" in options) {
      _$jscoverage['express/view.js'][151]++;
      options = {collection: options};
    }
    else {
      _$jscoverage['express/view.js'][152]++;
      if (! options.collection && ! options.locals && ! options.object) {
        _$jscoverage['express/view.js'][153]++;
        options = {object: options};
      }
    }
  }
  else {
    _$jscoverage['express/view.js'][156]++;
    options = {};
  }
  _$jscoverage['express/view.js'][160]++;
  options.locals = options.locals? utils.merge(locals, options.locals): locals;
  _$jscoverage['express/view.js'][165]++;
  options.partial = true;
  _$jscoverage['express/view.js'][166]++;
  options.layout = false;
  _$jscoverage['express/view.js'][169]++;
  var name = options.as || viewNameCache[view] || (viewNameCache[view] = objectName(view));
  _$jscoverage['express/view.js'][174]++;
  var collection = options.collection;
  _$jscoverage['express/view.js'][175]++;
  if (collection) {
    _$jscoverage['express/view.js'][176]++;
    var len = collection.length, buf = "";
    _$jscoverage['express/view.js'][178]++;
    delete options.collection;
    _$jscoverage['express/view.js'][179]++;
    options.locals.collectionLength = len;
    _$jscoverage['express/view.js'][180]++;
    for (var i = 0; i < len; ++i) {
      _$jscoverage['express/view.js'][181]++;
      var val = collection[i];
      _$jscoverage['express/view.js'][182]++;
      options.locals.firstInCollection = i === 0;
      _$jscoverage['express/view.js'][183]++;
      options.locals.indexInCollection = i;
      _$jscoverage['express/view.js'][184]++;
      options.locals.lastInCollection = i === len - 1;
      _$jscoverage['express/view.js'][185]++;
      options.object = val;
      _$jscoverage['express/view.js'][186]++;
      buf += this.partial(view, options);
}
    _$jscoverage['express/view.js'][188]++;
    return buf;
  }
  else {
    _$jscoverage['express/view.js'][190]++;
    if (options.object) {
      _$jscoverage['express/view.js'][191]++;
      if ("string" == typeof name) {
        _$jscoverage['express/view.js'][192]++;
        options.locals[name] = options.object;
      }
      else {
        _$jscoverage['express/view.js'][193]++;
        if (name === global) {
          _$jscoverage['express/view.js'][194]++;
          utils.merge(options.locals, options.object);
        }
        else {
          _$jscoverage['express/view.js'][196]++;
          options.scope = options.object;
        }
      }
    }
    _$jscoverage['express/view.js'][199]++;
    return this.render(view, options);
  }
});
_$jscoverage['express/view.js'][225]++;
http.ServerResponse.prototype.render = (function (view, options, fn) {
  _$jscoverage['express/view.js'][227]++;
  if (typeof options === "function") {
    _$jscoverage['express/view.js'][228]++;
    fn = options, options = {};
  }
  _$jscoverage['express/view.js'][231]++;
  var options = options || {}, app = this.app, viewOptions = app.settings["view options"], defaultEngine = app.settings["view engine"];
  _$jscoverage['express/view.js'][237]++;
  if (viewOptions) {
    _$jscoverage['express/view.js'][237]++;
    options.__proto__ = viewOptions;
  }
  _$jscoverage['express/view.js'][240]++;
  if (view.indexOf(".") < 0 && defaultEngine) {
    _$jscoverage['express/view.js'][241]++;
    view += "." + defaultEngine;
  }
  _$jscoverage['express/view.js'][245]++;
  var self = this, helpers = this.app.viewHelpers, dynamicHelpers = this.app.dynamicViewHelpers, root = viewRoot(this.app), ext = extname(view), partial = options.partial, layout = options.layout === undefined? true: options.layout, layout = layout === true? "layout" + ext: layout;
  _$jscoverage['express/view.js'][257]++;
  if (typeof layout === "string" && layout.indexOf(".") < 0) {
    _$jscoverage['express/view.js'][258]++;
    layout += ext;
  }
  _$jscoverage['express/view.js'][262]++;
  options.scope = options.scope || this.req;
  _$jscoverage['express/view.js'][265]++;
  if ("production" == app.settings.env) {
    _$jscoverage['express/view.js'][266]++;
    options.cache = true;
  }
  _$jscoverage['express/view.js'][270]++;
  if (options.partial) {
    _$jscoverage['express/view.js'][271]++;
    root = app.settings.partials || root + "/partials";
  }
  _$jscoverage['express/view.js'][275]++;
  var path = view[0] === "/"? view: root + "/" + view;
  _$jscoverage['express/view.js'][280]++;
  var locals = options.locals = options.locals || {};
  _$jscoverage['express/view.js'][281]++;
  options.locals.__filename = options.filename = path;
  _$jscoverage['express/view.js'][284]++;
  if (false !== options.dynamicHelpers) {
    _$jscoverage['express/view.js'][286]++;
    if (! this.__dynamicHelpers) {
      _$jscoverage['express/view.js'][287]++;
      this.__dynamicHelpers = {};
      _$jscoverage['express/view.js'][288]++;
      var keys = Object.keys(dynamicHelpers);
      _$jscoverage['express/view.js'][289]++;
      for (var i = 0, len = keys.length; i < len; ++i) {
        _$jscoverage['express/view.js'][290]++;
        var key = keys[i], val = dynamicHelpers[key];
        _$jscoverage['express/view.js'][292]++;
        if (typeof val === "function") {
          _$jscoverage['express/view.js'][293]++;
          this.__dynamicHelpers[key] = val.call(this.app, this.req, this);
        }
}
    }
    _$jscoverage['express/view.js'][302]++;
    helpers.__proto__ = this.__dynamicHelpers;
  }
  _$jscoverage['express/view.js'][306]++;
  options.locals.__proto__ = helpers;
  _$jscoverage['express/view.js'][309]++;
  options.locals.partial = (function (view, options) {
  _$jscoverage['express/view.js'][310]++;
  return self.partial.call(self, view, options, ext, locals);
});
  _$jscoverage['express/view.js'][313]++;
  function error(err) {
    _$jscoverage['express/view.js'][314]++;
    if (fn) {
      _$jscoverage['express/view.js'][315]++;
      fn(err);
    }
    else {
      _$jscoverage['express/view.js'][317]++;
      self.req.next(err);
    }
}
  _$jscoverage['express/view.js'][322]++;
  try {
    _$jscoverage['express/view.js'][323]++;
    var str = (options.cache? viewCache[path]: null) || cacheViewSync(path);
  }
  catch (err) {
    _$jscoverage['express/view.js'][325]++;
    return error(err);
  }
  _$jscoverage['express/view.js'][329]++;
  var engine = cache[ext] || (cache[ext] = require(ext.substr(1)));
  _$jscoverage['express/view.js'][332]++;
  try {
    _$jscoverage['express/view.js'][333]++;
    var str = engine.render(str, options);
  }
  catch (err) {
    _$jscoverage['express/view.js'][335]++;
    return error(err);
  }
  _$jscoverage['express/view.js'][339]++;
  if (layout) {
    _$jscoverage['express/view.js'][340]++;
    options.layout = false;
    _$jscoverage['express/view.js'][341]++;
    options.locals.body = str;
    _$jscoverage['express/view.js'][342]++;
    options.isLayout = true;
    _$jscoverage['express/view.js'][343]++;
    self.render(layout, options, fn);
  }
  else {
    _$jscoverage['express/view.js'][344]++;
    if (partial) {
      _$jscoverage['express/view.js'][345]++;
      return str;
    }
    else {
      _$jscoverage['express/view.js'][346]++;
      if (fn) {
        _$jscoverage['express/view.js'][347]++;
        fn(null, str);
      }
      else {
        _$jscoverage['express/view.js'][349]++;
        this.send(str, options.headers, options.status);
      }
    }
  }
});
_$jscoverage['express/view.js'].source = ["","/*!"," * Express - View"," * Copyright(c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var extname = require('path').extname","  , utils = require('connect').utils","  , http = require('http')","  , fs = require('fs')","  , mime = utils.mime;","","/**"," * Cache supported template engine exports to"," * increase performance by lowering the number"," * of calls to `require()`."," * "," * @type Object"," */","","var cache = {};","","/**"," * Cache view contents to prevent I/O hits."," *"," * @type Object"," */","","var viewCache = {};","","/**"," * Cache view path derived names."," *"," * @type Object"," */","","var viewNameCache = {};","","/**"," * Synchronously cache view at the given `path`."," *"," * @param {String} path"," * @return {String}"," * @api private"," */","","function cacheViewSync(path) {","  return viewCache[path] = fs.readFileSync(path, 'utf8');","}","","/**"," * Return view root path for the given `app`."," *"," * @param {express.Server} app"," * @return {String}"," * @api private"," */","","function viewRoot(app) {","  return app.set('views') || process.cwd() + '/views';","}","","/**"," * Return object name deduced from the given `view` path."," *"," * Examples:"," *"," *    \"movie/director\" -&gt; director"," *    \"movie.director\" -&gt; director"," *    \"forum/thread/post\" -&gt; post"," *    \"forum/thread.post\" -&gt; post"," *"," * @param {String} view"," * @return {String}"," * @api private"," */","","function objectName(view) {","  return view.split('/').slice(-1)[0].split('.')[0];","}","","/**"," * Register the given template engine `exports`"," * as `ext`. For example we may wish to map \".html\""," * files to jade:"," *"," *    app.register('.html', require('jade'));"," *"," * This is also useful for libraries that may not"," * match extensions correctly. For example my haml.js"," * library is installed from npm as \"hamljs\" so instead"," * of layout.hamljs, we can register the engine as \".haml\":"," *"," *    app.register('.haml', require('haml-js'));"," *"," * For engines that do not comply with the Express"," * specification, we can also wrap their api this way."," *"," *    app.register('.foo', {"," *        render: function(str, options) {"," *            // perhaps their api is"," *            // return foo.toHTML(str, options);"," *        }"," *    });"," *"," * @param {String} ext"," * @param {Object} obj"," * @api public"," */","","exports.register = function(ext, exports) {","  cache[ext] = exports;","};","","/**"," * Render `view` partial with the given `options`."," *"," * Options:"," *   - `object` Single object with name derived from the view (unless `as` is present) "," *"," *   - `as` Variable name for each `collection` value, defaults to the view name."," *     * as: 'something' will add the `something` local variable"," *     * as: this will use the collection value as the template context"," *     * as: global will merge the collection value's properties with `locals`"," *"," *   - `collection` Array of objects, the name is derived from the view name itself. "," *     For example _video.html_ will have a object _video_ available to it."," *"," * @param  {String} view"," * @param  {Object|Array} options, collection, or object"," * @return {String}"," * @api public"," */","","http.ServerResponse.prototype.partial = function(view, options, ext, locals){","  locals = locals || {};","","  // Inherit parent view extension when not present","  if (ext &amp;&amp; view.indexOf('.') &lt; 0) {","    view += ext;","  }","","  // Allow collection to be passed as second param","  if (options) {","    if ('length' in options) {","      options = { collection: options };","    } else if (!options.collection &amp;&amp; !options.locals &amp;&amp; !options.object) {","      options = { object: options };","    }","  } else {","    options = {};","  }","","  // Inherit locals from parent","  options.locals = options.locals","    ? utils.merge(locals, options.locals)","    : locals;","","  // Partials dont need layouts","  options.partial = true;","  options.layout = false;","","  // Deduce name from view path","  var name = options.as","    || viewNameCache[view]","    || (viewNameCache[view] = objectName(view));","","  // Collection support","  var collection = options.collection;","  if (collection) {","    var len = collection.length","      , buf = '';","    delete options.collection;","    options.locals.collectionLength = len;","    for (var i = 0; i &lt; len; ++i) {","      var val = collection[i];","      options.locals.firstInCollection = i === 0;","      options.locals.indexInCollection = i;","      options.locals.lastInCollection = i === len - 1;","      options.object = val;","      buf += this.partial(view, options);","    }","    return buf;","  } else {","    if (options.object) {","      if ('string' == typeof name) {","        options.locals[name] = options.object;","      } else if (name === global) {","        utils.merge(options.locals, options.object);","      } else {","        options.scope = options.object;","      }","    }","    return this.render(view, options);","  }","};","","/**"," * Render `view` with the given `options` and optional callback `fn`."," * When a callback function is given a response will _not_ be made"," * automatically, however otherwise a response of _200_ and _text/html_ is given."," *"," * Options:"," *  "," *  Most engines accept one or more of the following options,"," *  both _haml_ and _jade_ accept all:"," *"," *  - `scope`     Template evaluation context (the value of `this`)"," *  - `locals`    Object containing local variables"," *  - `debug`     Output debugging information"," *  - `status`    Response status code, defaults to 200"," *  - `headers`   Response headers object"," *"," * @param  {String} view"," * @param  {Object|Function} options or callback function"," * @param  {Function} fn"," * @api public"," */","","http.ServerResponse.prototype.render = function(view, options, fn){","  // Support callback function as second arg","  if (typeof options === 'function') {","    fn = options, options = {};","  }","  ","  var options = options || {}","    , app = this.app","    , viewOptions = app.settings['view options']","    , defaultEngine = app.settings['view engine'];","","  // Mixin \"view options\"","  if (viewOptions) options.__proto__ = viewOptions;","","  // Support \"view engine\" setting","  if (view.indexOf('.') &lt; 0 &amp;&amp; defaultEngine) {","    view += '.' + defaultEngine;","  }","","  // Defaults","  var self = this","    , helpers = this.app.viewHelpers","    , dynamicHelpers = this.app.dynamicViewHelpers","    , root = viewRoot(this.app)","    , ext = extname(view)","    , partial = options.partial","    , layout = options.layout === undefined ? true : options.layout","    , layout = layout === true","      ? 'layout' + ext","      : layout;","","  // Allow layout name without extension","  if (typeof layout === 'string' &amp;&amp; layout.indexOf('.') &lt; 0) {","    layout += ext;","  }","","  // Default execution scope to the response","  options.scope = options.scope || this.req;","","  // Auto-cache in production","  if ('production' == app.settings.env) {","    options.cache = true;","  }","","  // Partials support","  if (options.partial) {","    root = app.settings.partials || root + '/partials';","  }","","  // View path","  var path = view[0] === '/'","    ? view","    : root + '/' + view;","","  // Pass filename to the engine and view","  var locals = options.locals = options.locals || {};","  options.locals.__filename = options.filename = path;","","  // Dynamic helper support","  if (false !== options.dynamicHelpers) {","    // cache","    if (!this.__dynamicHelpers) {","      this.__dynamicHelpers = {};","      var keys = Object.keys(dynamicHelpers);","      for (var i = 0, len = keys.length; i &lt; len; ++i) {","        var key = keys[i]","          , val = dynamicHelpers[key];","        if (typeof val === 'function') {","          this.__dynamicHelpers[key] = val.call(","                this.app","              , this.req","              , this);","        }","      }","    }","","    // apply","    helpers.__proto__ = this.__dynamicHelpers;","  }","","  // Merge view helpers","  options.locals.__proto__ = helpers;","","  // Always expose partial() as a local","  options.locals.partial = function(view, options){","    return self.partial.call(self, view, options, ext, locals);","  };","","  function error(err) {","    if (fn) {","      fn(err);","    } else {","      self.req.next(err);","    }","  }","","  // Cache contents","  try {","    var str = (options.cache ? viewCache[path] : null) || cacheViewSync(path);","  } catch (err) {","    return error(err);","  }","","  // Cache template engine exports","  var engine = cache[ext] || (cache[ext] = require(ext.substr(1)));","","  // Attempt render","  try {","    var str = engine.render(str, options);","  } catch (err) {","    return error(err);","  }","","  // Layout support","  if (layout) {","    options.layout = false;","    options.locals.body = str;","    options.isLayout = true;","    self.render(layout, options, fn);","  } else if (partial) {","    return str;","  } else if (fn) {","    fn(null, str);","  } else {","    this.send(str, options.headers, options.status);","  }","};"];
