/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['express/request.js']) {
  _$jscoverage['express/request.js'] = [];
  _$jscoverage['express/request.js'][12] = 0;
  _$jscoverage['express/request.js'][22] = 0;
  _$jscoverage['express/request.js'][24] = 0;
  _$jscoverage['express/request.js'][51] = 0;
  _$jscoverage['express/request.js'][52] = 0;
  _$jscoverage['express/request.js'][85] = 0;
  _$jscoverage['express/request.js'][86] = 0;
  _$jscoverage['express/request.js'][87] = 0;
  _$jscoverage['express/request.js'][88] = 0;
  _$jscoverage['express/request.js'][89] = 0;
  _$jscoverage['express/request.js'][91] = 0;
  _$jscoverage['express/request.js'][92] = 0;
  _$jscoverage['express/request.js'][95] = 0;
  _$jscoverage['express/request.js'][96] = 0;
  _$jscoverage['express/request.js'][99] = 0;
  _$jscoverage['express/request.js'][100] = 0;
  _$jscoverage['express/request.js'][103] = 0;
  _$jscoverage['express/request.js'][123] = 0;
  _$jscoverage['express/request.js'][125] = 0;
  _$jscoverage['express/request.js'][126] = 0;
  _$jscoverage['express/request.js'][129] = 0;
  _$jscoverage['express/request.js'][130] = 0;
  _$jscoverage['express/request.js'][133] = 0;
  _$jscoverage['express/request.js'][134] = 0;
  _$jscoverage['express/request.js'][173] = 0;
  _$jscoverage['express/request.js'][174] = 0;
  _$jscoverage['express/request.js'][175] = 0;
  _$jscoverage['express/request.js'][176] = 0;
  _$jscoverage['express/request.js'][179] = 0;
  _$jscoverage['express/request.js'][180] = 0;
  _$jscoverage['express/request.js'][181] = 0;
  _$jscoverage['express/request.js'][182] = 0;
  _$jscoverage['express/request.js'][183] = 0;
  _$jscoverage['express/request.js'][185] = 0;
  _$jscoverage['express/request.js'][186] = 0;
  _$jscoverage['express/request.js'][187] = 0;
  _$jscoverage['express/request.js'][188] = 0;
  _$jscoverage['express/request.js'][189] = 0;
  _$jscoverage['express/request.js'][191] = 0;
  _$jscoverage['express/request.js'][192] = 0;
  _$jscoverage['express/request.js'][240] = 0;
  _$jscoverage['express/request.js'][241] = 0;
  _$jscoverage['express/request.js'][242] = 0;
  _$jscoverage['express/request.js'][243] = 0;
  _$jscoverage['express/request.js'][244] = 0;
  _$jscoverage['express/request.js'][245] = 0;
  _$jscoverage['express/request.js'][247] = 0;
  _$jscoverage['express/request.js'][248] = 0;
  _$jscoverage['express/request.js'][249] = 0;
  _$jscoverage['express/request.js'][250] = 0;
  _$jscoverage['express/request.js'][251] = 0;
  _$jscoverage['express/request.js'][252] = 0;
  _$jscoverage['express/request.js'][254] = 0;
  _$jscoverage['express/request.js'][259] = 0;
  _$jscoverage['express/request.js'][260] = 0;
  _$jscoverage['express/request.js'][270] = 0;
  _$jscoverage['express/request.js'][271] = 0;
}
_$jscoverage['express/request.js'][12]++;
var http = require("http"), utils = require("./utils"), mime = require("connect/utils").mime;
_$jscoverage['express/request.js'][22]++;
var flashFormatters = exports.flashFormatters = {s: (function (val) {
  _$jscoverage['express/request.js'][24]++;
  return String(val);
})};
_$jscoverage['express/request.js'][51]++;
http.IncomingMessage.prototype.header = (function (name, defaultValue) {
  _$jscoverage['express/request.js'][52]++;
  return this.headers[name.toLowerCase()] || defaultValue;
});
_$jscoverage['express/request.js'][85]++;
http.IncomingMessage.prototype.accepts = (function (type) {
  _$jscoverage['express/request.js'][86]++;
  var accept = this.header("Accept");
  _$jscoverage['express/request.js'][87]++;
  if (! accept || accept === "*/*") {
    _$jscoverage['express/request.js'][88]++;
    return true;
  }
  else {
    _$jscoverage['express/request.js'][89]++;
    if (type) {
      _$jscoverage['express/request.js'][91]++;
      if (type.indexOf("/") < 0) {
        _$jscoverage['express/request.js'][92]++;
        type = mime.types["." + type];
      }
      _$jscoverage['express/request.js'][95]++;
      if (accept.indexOf(type) >= 0) {
        _$jscoverage['express/request.js'][96]++;
        return true;
      }
      else {
        _$jscoverage['express/request.js'][99]++;
        type = type.split("/")[0] + "/*";
        _$jscoverage['express/request.js'][100]++;
        return accept.indexOf(type) >= 0;
      }
    }
    else {
      _$jscoverage['express/request.js'][103]++;
      return false;
    }
  }
});
_$jscoverage['express/request.js'][123]++;
http.IncomingMessage.prototype.param = (function (name) {
  _$jscoverage['express/request.js'][125]++;
  if (this.params[name] !== undefined) {
    _$jscoverage['express/request.js'][126]++;
    return this.params[name];
  }
  _$jscoverage['express/request.js'][129]++;
  if (this.query[name] !== undefined) {
    _$jscoverage['express/request.js'][130]++;
    return this.query[name];
  }
  _$jscoverage['express/request.js'][133]++;
  if (this.body && this.body[name] !== undefined) {
    _$jscoverage['express/request.js'][134]++;
    return this.body[name];
  }
});
_$jscoverage['express/request.js'][173]++;
http.IncomingMessage.prototype.flash = (function (type, msg) {
  _$jscoverage['express/request.js'][174]++;
  var msgs = this.session.flash = this.session.flash || {};
  _$jscoverage['express/request.js'][175]++;
  if (type && msg) {
    _$jscoverage['express/request.js'][176]++;
    var i = 2, args = arguments, formatters = this.app.flashFormatters || {};
    _$jscoverage['express/request.js'][179]++;
    formatters.__proto__ = flashFormatters;
    _$jscoverage['express/request.js'][180]++;
    msg = utils.miniMarkdown(utils.htmlEscape(msg));
    _$jscoverage['express/request.js'][181]++;
    msg = msg.replace(/%([a-zA-Z])/g, (function (_, format) {
  _$jscoverage['express/request.js'][182]++;
  var formatter = formatters[format];
  _$jscoverage['express/request.js'][183]++;
  if (formatter) {
    _$jscoverage['express/request.js'][183]++;
    return formatter(args[i++]);
  }
}));
    _$jscoverage['express/request.js'][185]++;
    return (msgs[type] = msgs[type] || []).push(msg);
  }
  else {
    _$jscoverage['express/request.js'][186]++;
    if (type) {
      _$jscoverage['express/request.js'][187]++;
      var arr = msgs[type];
      _$jscoverage['express/request.js'][188]++;
      delete msgs[type];
      _$jscoverage['express/request.js'][189]++;
      return arr || [];
    }
    else {
      _$jscoverage['express/request.js'][191]++;
      this.session.flash = {};
      _$jscoverage['express/request.js'][192]++;
      return msgs;
    }
  }
});
_$jscoverage['express/request.js'][240]++;
http.IncomingMessage.prototype.is = (function (type) {
  _$jscoverage['express/request.js'][241]++;
  var fn = this.app.is(type);
  _$jscoverage['express/request.js'][242]++;
  if (fn) {
    _$jscoverage['express/request.js'][242]++;
    return fn(this);
  }
  _$jscoverage['express/request.js'][243]++;
  var contentType = this.headers["content-type"];
  _$jscoverage['express/request.js'][244]++;
  if (! contentType) {
    _$jscoverage['express/request.js'][244]++;
    return;
  }
  _$jscoverage['express/request.js'][245]++;
  if (! ~ type.indexOf("/")) {
    _$jscoverage['express/request.js'][245]++;
    type = mime.type("." + type);
  }
  _$jscoverage['express/request.js'][247]++;
  if (~ type.indexOf(";")) {
    _$jscoverage['express/request.js'][247]++;
    type = type.split(";")[0];
  }
  _$jscoverage['express/request.js'][248]++;
  if (~ type.indexOf("*")) {
    _$jscoverage['express/request.js'][249]++;
    type = type.split("/");
    _$jscoverage['express/request.js'][250]++;
    contentType = contentType.split("/");
    _$jscoverage['express/request.js'][251]++;
    if ("*" == type[0] && type[1] == contentType[1]) {
      _$jscoverage['express/request.js'][251]++;
      return true;
    }
    _$jscoverage['express/request.js'][252]++;
    if ("*" == type[1] && type[0] == contentType[0]) {
      _$jscoverage['express/request.js'][252]++;
      return true;
    }
  }
  _$jscoverage['express/request.js'][254]++;
  return ~ contentType.indexOf(type);
});
_$jscoverage['express/request.js'][259]++;
function isxhr() {
  _$jscoverage['express/request.js'][260]++;
  return this.header("X-Requested-With", "").toLowerCase() === "xmlhttprequest";
}
_$jscoverage['express/request.js'][270]++;
http.IncomingMessage.prototype.__defineGetter__("isXMLHttpRequest", isxhr);
_$jscoverage['express/request.js'][271]++;
http.IncomingMessage.prototype.__defineGetter__("xhr", isxhr);
_$jscoverage['express/request.js'].source = ["","/*!"," * Express - request"," * Copyright(c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var http = require('http')","  , utils = require('./utils')","  , mime = require('connect/utils').mime;","","/**"," * Default flash formatters."," *"," * @type Object"," */","","var flashFormatters = exports.flashFormatters = {","  s: function(val){","    return String(val);","  }","};","","/**"," * Return request header or optional default."," *"," * Examples:"," *"," *     req.header('Content-Type');"," *     // =&gt; \"text/plain\""," *     "," *     req.header('content-type');"," *     // =&gt; \"text/plain\""," *     "," *     req.header('Accept');"," *     // =&gt; undefined"," *     "," *     req.header('Accept', 'text/html');"," *     // =&gt; \"text/html\""," *"," * @param {String} name"," * @param {String} defaultValue"," * @return {String} "," * @api public"," */","","http.IncomingMessage.prototype.header = function(name, defaultValue){","  return this.headers[name.toLowerCase()] || defaultValue;","};","","/**"," * Check if the _Accept_ header is present, and includes the given `type`."," *"," * When the _Accept_ header is not present `true` is returned. Otherwise"," * the given `type` is matched by an exact match, and then subtypes. You"," * may pass the subtype such as \"html\" which is then converted internally"," * to \"text/html\" using the mime lookup table."," *"," * Examples:"," * "," *     // Accept: text/html"," *     req.accepts('html');"," *     // =&gt; true"," *"," *     // Accept: text/*; application/json"," *     req.accepts('html');"," *     req.accepts('text/html');"," *     req.accepts('text/plain');"," *     req.accepts('application/json');"," *     // =&gt; true"," *"," *     req.accepts('image/png');"," *     req.accepts('png');"," *     // =&gt; false"," *"," * @param {String} type"," * @return {Boolean}"," * @api public"," */","","http.IncomingMessage.prototype.accepts = function(type){","  var accept = this.header('Accept');","  if (!accept || accept === '*/*') {","    return true;","  } else if (type) {","    // Allow \"html\" vs \"text/html\" etc","    if (type.indexOf('/') &lt; 0) {","      type = mime.types['.' + type];","    }","    // Check if we have a direct match","    if (accept.indexOf(type) &gt;= 0) {","      return true;","    // Check if we have type/*","    } else {","      type = type.split('/')[0] + '/*';","      return accept.indexOf(type) &gt;= 0;","    }","  } else {","    return false;","  }","};","","/**"," * Return the value of param `name` when present."," *"," *  - Checks route placeholders, ex: _/user/:id_"," *  - Checks query string params, ex: ?id=12"," *  - Checks urlencoded body params, ex: id=12"," *"," * To utilize urlencoded request bodies, `req.body`"," * should be an object. This can be done by using"," * the `connect.bodyDecoder` middleware."," *"," * @param {String} name"," * @return {String}"," * @api public"," */","","http.IncomingMessage.prototype.param = function(name){","  // Route params like /user/:id","  if (this.params[name] !== undefined) {","    return this.params[name]; ","  }","  // Query string params","  if (this.query[name] !== undefined) {","    return this.query[name]; ","  }","  // Request body params via connect.bodyDecoder","  if (this.body &amp;&amp; this.body[name] !== undefined) {","    return this.body[name];","  }","};","","/**"," * Queue flash `msg` of the given `type`."," *"," * Examples:"," *"," *      req.flash('info', 'email sent');"," *      req.flash('error', 'email delivery failed');"," *      req.flash('info', 'email re-sent');"," *      // =&gt; 2"," *"," *      req.flash('info');"," *      // =&gt; ['email sent', 'email re-sent']"," *"," *      req.flash('info');"," *      // =&gt; []"," *"," *      req.flash();"," *      // =&gt; { error: ['email delivery failed'], info: [] }"," *"," * Formatting:"," *"," * Flash notifications also support arbitrary formatting support."," * For example you may pass variable arguments to `req.flash()`"," * and use the %s specifier to be replaced by the associated argument:"," *"," *     req.flash('info', 'email has been sent to %s.', userName);"," *"," * To add custom formatters use the `exports.flashFormatters` object."," *"," * @param {String} type"," * @param {String} msg"," * @return {Array|Object|Number}"," * @api public"," */","","http.IncomingMessage.prototype.flash = function(type, msg){","  var msgs = this.session.flash = this.session.flash || {};","  if (type &amp;&amp; msg) {","    var i = 2","      , args = arguments","      , formatters = this.app.flashFormatters || {};","    formatters.__proto__ = flashFormatters;","    msg = utils.miniMarkdown(utils.htmlEscape(msg));","    msg = msg.replace(/%([a-zA-Z])/g, function(_, format){","      var formatter = formatters[format];","      if (formatter) return formatter(args[i++]);","    });","    return (msgs[type] = msgs[type] || []).push(msg);","  } else if (type) {","    var arr = msgs[type];","    delete msgs[type];","    return arr || [];","  } else {","    this.session.flash = {};","    return msgs;","  }","};","","/**"," * Check if the incoming request contains the \"Content-Type\" "," * header field, and it contains the give mime `type`."," *"," * Examples:"," *"," *      // With Content-Type: text/html; charset=utf-8"," *      req.is('html');"," *      req.is('text/html');"," *      // =&gt; true"," *     "," *      // When Content-Type is application/json"," *      req.is('json');"," *      req.is('application/json');"," *      // =&gt; true"," *     "," *      req.is('html');"," *      // =&gt; false"," * "," * Ad-hoc callbacks can also be registered with Express, to perform"," * assertions again the request, for example if we need an expressive"," * way to check if our incoming request is an image, we can register \"an image\""," * callback:"," * "," *       app.is('an image', function(req){"," *         return 0 == req.headers['content-type'].indexOf('image');"," *       });"," *       "," *  Now within our route callbacks, we can use to to assert content types"," *  such as \"image/jpeg\", \"image/png\", etc."," * "," *      app.post('/image/upload', function(req, res, next){"," *        if (req.is('an image')) {"," *          // do something"," *        } else {"," *          next();"," *        }"," *      });"," * "," * @param {String} type"," * @return {Boolean}"," * @api public"," */","","http.IncomingMessage.prototype.is = function(type){","  var fn = this.app.is(type);","  if (fn) return fn(this);","  var contentType = this.headers['content-type'];","  if (!contentType) return;","  if (!~type.indexOf('/')) type = mime.type('.' + type);","  // TODO: remove when connect no longer appends charset...","  if (~type.indexOf(';')) type = type.split(';')[0];","  if (~type.indexOf('*')) {","    type = type.split('/')","    contentType = contentType.split('/');","    if ('*' == type[0] &amp;&amp; type[1] == contentType[1]) return true;","    if ('*' == type[1] &amp;&amp; type[0] == contentType[0]) return true;","  }","  return ~contentType.indexOf(type);","};","","// Callback for isXMLHttpRequest / xhr","","function isxhr() {","  return this.header('X-Requested-With', '').toLowerCase() === 'xmlhttprequest';","}","","/**"," * Check if the request was an _XMLHttpRequest_."," *"," * @return {Boolean}"," * @api public"," */","","http.IncomingMessage.prototype.__defineGetter__('isXMLHttpRequest', isxhr);","http.IncomingMessage.prototype.__defineGetter__('xhr', isxhr);"];
