/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['express/response.js']) {
  _$jscoverage['express/response.js'] = [];
  _$jscoverage['express/response.js'][12] = 0;
  _$jscoverage['express/response.js'][26] = 0;
  _$jscoverage['express/response.js'][48] = 0;
  _$jscoverage['express/response.js'][50] = 0;
  _$jscoverage['express/response.js'][51] = 0;
  _$jscoverage['express/response.js'][56] = 0;
  _$jscoverage['express/response.js'][59] = 0;
  _$jscoverage['express/response.js'][60] = 0;
  _$jscoverage['express/response.js'][64] = 0;
  _$jscoverage['express/response.js'][66] = 0;
  _$jscoverage['express/response.js'][67] = 0;
  _$jscoverage['express/response.js'][69] = 0;
  _$jscoverage['express/response.js'][70] = 0;
  _$jscoverage['express/response.js'][72] = 0;
  _$jscoverage['express/response.js'][73] = 0;
  _$jscoverage['express/response.js'][75] = 0;
  _$jscoverage['express/response.js'][77] = 0;
  _$jscoverage['express/response.js'][78] = 0;
  _$jscoverage['express/response.js'][79] = 0;
  _$jscoverage['express/response.js'][82] = 0;
  _$jscoverage['express/response.js'][83] = 0;
  _$jscoverage['express/response.js'][85] = 0;
  _$jscoverage['express/response.js'][86] = 0;
  _$jscoverage['express/response.js'][87] = 0;
  _$jscoverage['express/response.js'][88] = 0;
  _$jscoverage['express/response.js'][91] = 0;
  _$jscoverage['express/response.js'][95] = 0;
  _$jscoverage['express/response.js'][96] = 0;
  _$jscoverage['express/response.js'][102] = 0;
  _$jscoverage['express/response.js'][103] = 0;
  _$jscoverage['express/response.js'][104] = 0;
  _$jscoverage['express/response.js'][105] = 0;
  _$jscoverage['express/response.js'][106] = 0;
  _$jscoverage['express/response.js'][111] = 0;
  _$jscoverage['express/response.js'][112] = 0;
  _$jscoverage['express/response.js'][113] = 0;
  _$jscoverage['express/response.js'][117] = 0;
  _$jscoverage['express/response.js'][118] = 0;
  _$jscoverage['express/response.js'][137] = 0;
  _$jscoverage['express/response.js'][138] = 0;
  _$jscoverage['express/response.js'][142] = 0;
  _$jscoverage['express/response.js'][144] = 0;
  _$jscoverage['express/response.js'][145] = 0;
  _$jscoverage['express/response.js'][146] = 0;
  _$jscoverage['express/response.js'][147] = 0;
  _$jscoverage['express/response.js'][149] = 0;
  _$jscoverage['express/response.js'][153] = 0;
  _$jscoverage['express/response.js'][154] = 0;
  _$jscoverage['express/response.js'][155] = 0;
  _$jscoverage['express/response.js'][156] = 0;
  _$jscoverage['express/response.js'][157] = 0;
  _$jscoverage['express/response.js'][158] = 0;
  _$jscoverage['express/response.js'][159] = 0;
  _$jscoverage['express/response.js'][162] = 0;
  _$jscoverage['express/response.js'][163] = 0;
  _$jscoverage['express/response.js'][169] = 0;
  _$jscoverage['express/response.js'][171] = 0;
  _$jscoverage['express/response.js'][172] = 0;
  _$jscoverage['express/response.js'][174] = 0;
  _$jscoverage['express/response.js'][175] = 0;
  _$jscoverage['express/response.js'][176] = 0;
  _$jscoverage['express/response.js'][177] = 0;
  _$jscoverage['express/response.js'][178] = 0;
  _$jscoverage['express/response.js'][181] = 0;
  _$jscoverage['express/response.js'][182] = 0;
  _$jscoverage['express/response.js'][183] = 0;
  _$jscoverage['express/response.js'][184] = 0;
  _$jscoverage['express/response.js'][185] = 0;
  _$jscoverage['express/response.js'][205] = 0;
  _$jscoverage['express/response.js'][206] = 0;
  _$jscoverage['express/response.js'][217] = 0;
  _$jscoverage['express/response.js'][218] = 0;
  _$jscoverage['express/response.js'][221] = 0;
  _$jscoverage['express/response.js'][236] = 0;
  _$jscoverage['express/response.js'][237] = 0;
  _$jscoverage['express/response.js'][255] = 0;
  _$jscoverage['express/response.js'][256] = 0;
  _$jscoverage['express/response.js'][257] = 0;
  _$jscoverage['express/response.js'][259] = 0;
  _$jscoverage['express/response.js'][260] = 0;
  _$jscoverage['express/response.js'][262] = 0;
  _$jscoverage['express/response.js'][274] = 0;
  _$jscoverage['express/response.js'][275] = 0;
  _$jscoverage['express/response.js'][292] = 0;
  _$jscoverage['express/response.js'][293] = 0;
  _$jscoverage['express/response.js'][294] = 0;
  _$jscoverage['express/response.js'][338] = 0;
  _$jscoverage['express/response.js'][339] = 0;
  _$jscoverage['express/response.js'][344] = 0;
  _$jscoverage['express/response.js'][350] = 0;
  _$jscoverage['express/response.js'][353] = 0;
  _$jscoverage['express/response.js'][358] = 0;
  _$jscoverage['express/response.js'][361] = 0;
  _$jscoverage['express/response.js'][362] = 0;
  _$jscoverage['express/response.js'][363] = 0;
  _$jscoverage['express/response.js'][365] = 0;
  _$jscoverage['express/response.js'][366] = 0;
  _$jscoverage['express/response.js'][370] = 0;
}
_$jscoverage['express/response.js'][12]++;
var fs = require("fs"), http = require("http"), path = require("path"), pump = require("sys").pump, utils = require("connect/utils"), mime = require("connect/utils").mime, parseRange = require("./utils").parseRange;
_$jscoverage['express/response.js'][26]++;
var multiple = ["Set-Cookie"];
_$jscoverage['express/response.js'][48]++;
http.ServerResponse.prototype.send = (function (body, headers, status) {
  _$jscoverage['express/response.js'][50]++;
  if (typeof headers === "number") {
    _$jscoverage['express/response.js'][51]++;
    status = headers, headers = null;
  }
  _$jscoverage['express/response.js'][56]++;
  status = status || 200;
  _$jscoverage['express/response.js'][59]++;
  if (! arguments.length) {
    _$jscoverage['express/response.js'][60]++;
    body = status = 204;
  }
  _$jscoverage['express/response.js'][64]++;
  switch (typeof body) {
  case "number":
    _$jscoverage['express/response.js'][66]++;
    if (! this.headers["Content-Type"]) {
      _$jscoverage['express/response.js'][67]++;
      this.contentType(".txt");
    }
    _$jscoverage['express/response.js'][69]++;
    body = http.STATUS_CODES[status = body];
    _$jscoverage['express/response.js'][70]++;
    break;
  case "string":
    _$jscoverage['express/response.js'][72]++;
    if (! this.headers["Content-Type"]) {
      _$jscoverage['express/response.js'][73]++;
      this.contentType(".html");
    }
    _$jscoverage['express/response.js'][75]++;
    break;
  case "object":
    _$jscoverage['express/response.js'][77]++;
    if (body instanceof Buffer) {
      _$jscoverage['express/response.js'][78]++;
      if (! this.headers["Content-Type"]) {
        _$jscoverage['express/response.js'][79]++;
        this.contentType(".bin");
      }
    }
    else {
      _$jscoverage['express/response.js'][82]++;
      if (! this.headers["Content-Type"]) {
        _$jscoverage['express/response.js'][83]++;
        this.contentType(".json");
      }
      _$jscoverage['express/response.js'][85]++;
      body = JSON.stringify(body);
      _$jscoverage['express/response.js'][86]++;
      if (this.req.query.callback && this.app.settings["jsonp callback"]) {
        _$jscoverage['express/response.js'][87]++;
        this.header("Content-Type", "text/javascript");
        _$jscoverage['express/response.js'][88]++;
        body = this.req.query.callback + "(" + body + ");";
      }
    }
    _$jscoverage['express/response.js'][91]++;
    break;
  }
  _$jscoverage['express/response.js'][95]++;
  if (! this.headers["Content-Length"]) {
    _$jscoverage['express/response.js'][96]++;
    this.header("Content-Length", body instanceof Buffer? body.length: Buffer.byteLength(body));
  }
  _$jscoverage['express/response.js'][102]++;
  if (headers) {
    _$jscoverage['express/response.js'][103]++;
    var fields = Object.keys(headers);
    _$jscoverage['express/response.js'][104]++;
    for (var i = 0, len = fields.length; i < len; ++i) {
      _$jscoverage['express/response.js'][105]++;
      var field = fields[i];
      _$jscoverage['express/response.js'][106]++;
      this.header(field, headers[field]);
}
  }
  _$jscoverage['express/response.js'][111]++;
  if (204 === status) {
    _$jscoverage['express/response.js'][112]++;
    delete this.headers["Content-Type"];
    _$jscoverage['express/response.js'][113]++;
    delete this.headers["Content-Length"];
  }
  _$jscoverage['express/response.js'][117]++;
  this.writeHead(status, this.headers);
  _$jscoverage['express/response.js'][118]++;
  this.end("HEAD" == this.req.method? undefined: body);
});
_$jscoverage['express/response.js'][137]++;
http.ServerResponse.prototype.sendfile = (function (path, fn) {
  _$jscoverage['express/response.js'][138]++;
  var self = this, streamThreshold = this.app.set("stream threshold") || 32768, ranges = self.req.headers.range;
  _$jscoverage['express/response.js'][142]++;
  if (~ path.indexOf("..")) {
    _$jscoverage['express/response.js'][142]++;
    this.send(403);
  }
  _$jscoverage['express/response.js'][144]++;
  function error(err) {
    _$jscoverage['express/response.js'][145]++;
    delete self.headers["Content-Disposition"];
    _$jscoverage['express/response.js'][146]++;
    if (fn) {
      _$jscoverage['express/response.js'][147]++;
      fn(err, path);
    }
    else {
      _$jscoverage['express/response.js'][149]++;
      self.req.next(err);
    }
}
  _$jscoverage['express/response.js'][153]++;
  fs.stat(path, (function (err, stat) {
  _$jscoverage['express/response.js'][154]++;
  if (err) {
    _$jscoverage['express/response.js'][154]++;
    return error(err);
  }
  _$jscoverage['express/response.js'][155]++;
  if (stat.size >= streamThreshold) {
    _$jscoverage['express/response.js'][156]++;
    var status = 200;
    _$jscoverage['express/response.js'][157]++;
    if (ranges) {
      _$jscoverage['express/response.js'][157]++;
      ranges = parseRange(stat.size, ranges);
    }
    _$jscoverage['express/response.js'][158]++;
    if (ranges) {
      _$jscoverage['express/response.js'][159]++;
      var stream = fs.createReadStream(path, ranges[0]), start = ranges[0].start, end = ranges[0].end;
      _$jscoverage['express/response.js'][162]++;
      status = 206;
      _$jscoverage['express/response.js'][163]++;
      self.header("Content-Range", "bytes " + start + "-" + end + "/" + stat.size);
      _$jscoverage['express/response.js'][169]++;
      self.header("Content-Length", end - start + 1);
    }
    else {
      _$jscoverage['express/response.js'][171]++;
      var stream = fs.createReadStream(path);
      _$jscoverage['express/response.js'][172]++;
      self.header("Content-Length", stat.size);
    }
    _$jscoverage['express/response.js'][174]++;
    self.contentType(path);
    _$jscoverage['express/response.js'][175]++;
    self.header("Accept-Ranges", "bytes");
    _$jscoverage['express/response.js'][176]++;
    self.writeHead(status, self.headers);
    _$jscoverage['express/response.js'][177]++;
    pump(stream, self, (function (err) {
  _$jscoverage['express/response.js'][178]++;
  fn && fn(err, path, true);
}));
  }
  else {
    _$jscoverage['express/response.js'][181]++;
    fs.readFile(path, (function (err, buf) {
  _$jscoverage['express/response.js'][182]++;
  if (err) {
    _$jscoverage['express/response.js'][182]++;
    return error(err);
  }
  _$jscoverage['express/response.js'][183]++;
  self.contentType(path);
  _$jscoverage['express/response.js'][184]++;
  self.send(buf);
  _$jscoverage['express/response.js'][185]++;
  fn && fn(null, path);
}));
  }
}));
});
_$jscoverage['express/response.js'][205]++;
http.ServerResponse.prototype.contentType = (function (type) {
  _$jscoverage['express/response.js'][206]++;
  return this.header("Content-Type", mime.type(type));
});
_$jscoverage['express/response.js'][217]++;
http.ServerResponse.prototype.attachment = (function (filename) {
  _$jscoverage['express/response.js'][218]++;
  this.header("Content-Disposition", filename? "attachment; filename=\"" + path.basename(filename) + "\"": "attachment");
  _$jscoverage['express/response.js'][221]++;
  return this;
});
_$jscoverage['express/response.js'][236]++;
http.ServerResponse.prototype.download = (function (path, filename, fn) {
  _$jscoverage['express/response.js'][237]++;
  this.attachment(filename || path).sendfile(path, fn);
});
_$jscoverage['express/response.js'][255]++;
http.ServerResponse.prototype.header = (function (name, val) {
  _$jscoverage['express/response.js'][256]++;
  if (val === undefined) {
    _$jscoverage['express/response.js'][257]++;
    return this.headers[name];
  }
  else {
    _$jscoverage['express/response.js'][259]++;
    if (this.headers[name] && ~ multiple.indexOf(name)) {
      _$jscoverage['express/response.js'][260]++;
      return this.headers[name] += "\r\n" + name + ": " + val;
    }
    else {
      _$jscoverage['express/response.js'][262]++;
      return this.headers[name] = val;
    }
  }
});
_$jscoverage['express/response.js'][274]++;
http.ServerResponse.prototype.clearCookie = (function (name) {
  _$jscoverage['express/response.js'][275]++;
  this.cookie(name, "", {expires: new Date(1)});
});
_$jscoverage['express/response.js'][292]++;
http.ServerResponse.prototype.cookie = (function (name, val, options) {
  _$jscoverage['express/response.js'][293]++;
  var cookie = utils.serializeCookie(name, val, options);
  _$jscoverage['express/response.js'][294]++;
  this.header("Set-Cookie", cookie);
});
_$jscoverage['express/response.js'][338]++;
http.ServerResponse.prototype.redirect = (function (url, status) {
  _$jscoverage['express/response.js'][339]++;
  var basePath = this.app.set("home") || "/", status = status || 302, body;
  _$jscoverage['express/response.js'][344]++;
  var map = {back: this.req.headers.referrer || this.req.headers.referer || basePath, home: basePath};
  _$jscoverage['express/response.js'][350]++;
  map.__proto__ = this.app.redirects;
  _$jscoverage['express/response.js'][353]++;
  var mapped = typeof map[url] === "function"? map[url](this.req, this): map[url];
  _$jscoverage['express/response.js'][358]++;
  url = mapped || url;
  _$jscoverage['express/response.js'][361]++;
  if (this.req.accepts("html")) {
    _$jscoverage['express/response.js'][362]++;
    body = "<p>" + http.STATUS_CODES[status] + ". Redirecting to <a href=\"" + url + "\">" + url + "</a></p>";
    _$jscoverage['express/response.js'][363]++;
    this.header("Content-Type", "text/html");
  }
  else {
    _$jscoverage['express/response.js'][365]++;
    body = http.STATUS_CODES[status] + ". Redirecting to " + url;
    _$jscoverage['express/response.js'][366]++;
    this.header("Content-Type", "text/plain");
  }
  _$jscoverage['express/response.js'][370]++;
  this.send(body, {Location: url}, status);
});
_$jscoverage['express/response.js'].source = ["","/*!"," * Express - response"," * Copyright(c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var fs = require('fs')","  , http = require('http')","  , path = require('path')","  , pump = require('sys').pump","  , utils = require('connect/utils')","  , mime = require('connect/utils').mime","  , parseRange = require('./utils').parseRange;","","/**"," * Header fields supporting multiple values."," * "," * @type Array"," */","","var multiple = ['Set-Cookie'];","","/**"," * Send a response with the given `body` and optional `headers` and `status` code."," *"," * Examples:"," *"," *     res.send();"," *     res.send(new Buffer('wahoo'));"," *     res.send({ some: 'json' });"," *     res.send('&lt;p&gt;some html&lt;/p&gt;');"," *     res.send('Sorry, cant find that', 404);"," *     res.send('text', { 'Content-Type': 'text/plain' }, 201);"," *     res.send(404);"," *"," * @param {String|Object|Number|Buffer} body or status"," * @param {Object|Number} headers or status"," * @param {Number} status"," * @return {ServerResponse}"," * @api public"," */","","http.ServerResponse.prototype.send = function(body, headers, status){","  // Allow status as second arg","  if (typeof headers === 'number') {","    status = headers,","    headers = null;","  }","","  // Defaults","  status = status || 200;","","  // Allow 0 args as 204","  if (!arguments.length) {","    body = status = 204;","  }","","  // Determine content type","  switch (typeof body) {","    case 'number':","      if (!this.headers['Content-Type']) {","        this.contentType('.txt');","      }","      body = http.STATUS_CODES[status = body];","      break;","    case 'string':","      if (!this.headers['Content-Type']) {","        this.contentType('.html');","      }","      break;","    case 'object':","      if (body instanceof Buffer) {","        if (!this.headers['Content-Type']) {","          this.contentType('.bin');","        }","      } else {","        if (!this.headers['Content-Type']) {","          this.contentType('.json');","        }","        body = JSON.stringify(body);","        if (this.req.query.callback &amp;&amp; this.app.settings['jsonp callback']) {","          this.header('Content-Type', 'text/javascript');","          body = this.req.query.callback + '(' + body + ');';","        }","      }","      break;","  }","","  // Populate Content-Length","  if (!this.headers['Content-Length']) {","    this.header('Content-Length', body instanceof Buffer","      ? body.length","      : Buffer.byteLength(body));","  }","","  // Merge headers passed","  if (headers) {","    var fields = Object.keys(headers);","    for (var i = 0, len = fields.length; i &lt; len; ++i) {","      var field = fields[i];","      this.header(field, headers[field]);","    }","  }","","  // Strip irrelevant headers","  if (204 === status) {","    delete this.headers['Content-Type'];","    delete this.headers['Content-Length'];","  }","","  // Respond","  this.writeHead(status, this.headers);","  this.end('HEAD' == this.req.method ? undefined : body);","};","","/**"," * Transfer the file at the given `path`. Automatically sets "," * the _Content-Type_ response header via `res.contentType()`. "," *"," * The given callback `fn` is invoked when an error occurs,"," * passing it as the first argument, or when the file is transferred,"," * passing the path as the second argument."," *"," * When the filesize is &gt;= \"stream threshold\" (defaulting to 32k), the"," * file will be streamed using an `fs.ReadStream` and `sys.pump()`."," *"," * @param {String} path"," * @param {Function} fn"," * @api public"," */","","http.ServerResponse.prototype.sendfile = function(path, fn){","  var self = this","    , streamThreshold = this.app.set('stream threshold') || 32 * 1024","    , ranges = self.req.headers.range;","","  if (~path.indexOf('..')) this.send(403);","","  function error(err) {","    delete self.headers['Content-Disposition'];","    if (fn) {","      fn(err, path);","    } else {","      self.req.next(err);","    }","  }","","  fs.stat(path, function(err, stat){","    if (err) return error(err);","    if (stat.size &gt;= streamThreshold) {","      var status = 200;","      if (ranges) ranges = parseRange(stat.size, ranges);","      if (ranges) {","        var stream = fs.createReadStream(path, ranges[0])","          , start = ranges[0].start","          , end = ranges[0].end;","        status = 206;","        self.header('Content-Range', 'bytes '","          + start","          + '-'","          + end","          + '/'","          + stat.size);","        self.header('Content-Length', end - start + 1);","      } else {","        var stream = fs.createReadStream(path);","        self.header('Content-Length', stat.size);","      }","      self.contentType(path);","      self.header('Accept-Ranges', 'bytes');","      self.writeHead(status, self.headers);","      pump(stream, self, function(err){","        fn &amp;&amp; fn(err, path, true);","      });","    } else {","      fs.readFile(path, function(err, buf){","        if (err) return error(err);","        self.contentType(path);","        self.send(buf);","        fn &amp;&amp; fn(null, path);","      });","    }","  });","};","","/**"," * Set _Content-Type_ response header passed through `mime.type()`."," *"," * Examples:"," *"," *     var filename = 'path/to/image.png';"," *     res.contentType(filename);"," *     // res.headers['Content-Type'] is now \"image/png\""," *"," * @param {String} type"," * @return {String} the resolved mime type"," * @api public"," */","","http.ServerResponse.prototype.contentType = function(type){","  return this.header('Content-Type', mime.type(type));","};","","/**"," * Set _Content-Disposition_ header to _attachment_ with optional `filename`."," *"," * @param {String} filename"," * @return {ServerResponse}"," * @api public"," */","","http.ServerResponse.prototype.attachment = function(filename){","  this.header('Content-Disposition', filename","    ? 'attachment; filename=\"' + path.basename(filename) + '\"'","    : 'attachment');","  return this;","};","","/**"," * Transfer the file at the given `path`, with optional "," * `filename` as an attachment. Once transferred, or if an"," * error occurs `fn` is called with the error and path."," *"," * @param {String} path"," * @param {String} filename"," * @param {Function} fn"," * @return {Type}"," * @api public"," */","","http.ServerResponse.prototype.download = function(path, filename, fn){","  this.attachment(filename || path).sendfile(path, fn);","};","","/**"," * Set or get response header `name` with optional `val`."," *"," * Headers that may be set multiple times (as indicated by the `multiple` array)"," * can be called with a value several times, for example:"," *"," *    res.header('Set-Cookie', '...');"," *    res.header('Set-Cookie', '...');"," *"," * @param {String} name"," * @param {String} val"," * @return {String}"," * @api public"," */","","http.ServerResponse.prototype.header = function(name, val){","  if (val === undefined) {","    return this.headers[name];","  } else {","    if (this.headers[name] &amp;&amp; ~multiple.indexOf(name)) {","      return this.headers[name] += '\\r\\n' + name + ': ' + val;","    } else {","      return this.headers[name] = val;","    }","  }","};","","/**"," * Clear cookie `name`."," *"," * @param {String} name"," * @api public"," */","","http.ServerResponse.prototype.clearCookie = function(name){","  this.cookie(name, '', { expires: new Date(1) });","};","","/**"," * Set cookie `name` to `val`."," *"," * Examples:"," *"," *    // \"Remember Me\" for 15 minutes"," *    res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly: true });"," *"," * @param {String} name"," * @param {String} val"," * @param {Options} options"," * @api public"," */","","http.ServerResponse.prototype.cookie = function(name, val, options){","  var cookie = utils.serializeCookie(name, val, options);","  this.header('Set-Cookie', cookie);","};","","/**"," * Redirect to the given `url` with optional response `status`"," * defauling to 302."," *"," * The given `url` can also be the name of a mapped url, for"," * example by default express supports \"back\" which redirects"," * to the _Referrer_ or _Referer_ headers or the application's"," * \"home\" setting. Express also supports \"home\" out of the box,"," * which can be set via `app.set('home', '/blog');`, and defaults"," * to '/'."," *"," * Redirect Mapping:"," * "," *  To extend the redirect mapping capabilities that Express provides,"," *  we may use the `app.redirect()` method:"," * "," *     app.redirect('google', 'http://google.com');"," * "," *  Now in a route we may call:"," *"," *     res.redirect('google');"," *"," *  We may also map dynamic redirects:"," *"," *      app.redirect('comments', function(req, res){"," *          return '/post/' + req.params.id + '/comments';"," *      });"," *"," *  So now we may do the following, and the redirect will dynamically adjust to"," *  the context of the request. If we called this route with _GET /post/12_ our"," *  redirect _Location_ would be _/post/12/comments_."," *"," *      app.get('/post/:id', function(req, res){"," *          res.redirect('comments');"," *      });"," *"," * @param {String} url"," * @param {Number} code"," * @api public"," */","","http.ServerResponse.prototype.redirect = function(url, status){","  var basePath = this.app.set('home') || '/'","    , status = status || 302","    , body;","","  // Setup redirect map","  var map = {","    back: this.req.headers.referrer || this.req.headers.referer || basePath,","    home: basePath","  };","","  // Support custom redirect map","  map.__proto__ = this.app.redirects;","","  // Attempt mapped redirect","  var mapped = typeof map[url] === 'function'","    ? map[url](this.req, this)","    : map[url];","","  // Perform redirect","  url = mapped || url;","","  // Support text/{plain,html} by default","  if (this.req.accepts('html')) {","    body = '&lt;p&gt;' + http.STATUS_CODES[status] + '. Redirecting to &lt;a href=\"' + url + '\"&gt;' + url + '&lt;/a&gt;&lt;/p&gt;';","    this.header('Content-Type', 'text/html');","  } else {","    body = http.STATUS_CODES[status] + '. Redirecting to ' + url;","    this.header('Content-Type', 'text/plain');","  }","","  // Respond","  this.send(body, { Location: url }, status);","};"];
