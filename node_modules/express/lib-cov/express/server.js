/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['express/server.js']) {
  _$jscoverage['express/server.js'] = [];
  _$jscoverage['express/server.js'][12] = 0;
  _$jscoverage['express/server.js'][26] = 0;
  _$jscoverage['express/server.js'][27] = 0;
  _$jscoverage['express/server.js'][28] = 0;
  _$jscoverage['express/server.js'][29] = 0;
  _$jscoverage['express/server.js'][30] = 0;
  _$jscoverage['express/server.js'][31] = 0;
  _$jscoverage['express/server.js'][32] = 0;
  _$jscoverage['express/server.js'][33] = 0;
  _$jscoverage['express/server.js'][34] = 0;
  _$jscoverage['express/server.js'][35] = 0;
  _$jscoverage['express/server.js'][38] = 0;
  _$jscoverage['express/server.js'][41] = 0;
  _$jscoverage['express/server.js'][42] = 0;
  _$jscoverage['express/server.js'][43] = 0;
  _$jscoverage['express/server.js'][47] = 0;
  _$jscoverage['express/server.js'][50] = 0;
  _$jscoverage['express/server.js'][53] = 0;
  _$jscoverage['express/server.js'][54] = 0;
  _$jscoverage['express/server.js'][55] = 0;
  _$jscoverage['express/server.js'][56] = 0;
  _$jscoverage['express/server.js'][57] = 0;
  _$jscoverage['express/server.js'][58] = 0;
  _$jscoverage['express/server.js'][59] = 0;
  _$jscoverage['express/server.js'][61] = 0;
  _$jscoverage['express/server.js'][62] = 0;
  _$jscoverage['express/server.js'][63] = 0;
  _$jscoverage['express/server.js'][65] = 0;
  _$jscoverage['express/server.js'][69] = 0;
  _$jscoverage['express/server.js'][70] = 0;
  _$jscoverage['express/server.js'][71] = 0;
  _$jscoverage['express/server.js'][72] = 0;
  _$jscoverage['express/server.js'][80] = 0;
  _$jscoverage['express/server.js'][86] = 0;
  _$jscoverage['express/server.js'][92] = 0;
  _$jscoverage['express/server.js'][93] = 0;
  _$jscoverage['express/server.js'][94] = 0;
  _$jscoverage['express/server.js'][101] = 0;
  _$jscoverage['express/server.js'][102] = 0;
  _$jscoverage['express/server.js'][103] = 0;
  _$jscoverage['express/server.js'][114] = 0;
  _$jscoverage['express/server.js'][115] = 0;
  _$jscoverage['express/server.js'][116] = 0;
  _$jscoverage['express/server.js'][117] = 0;
  _$jscoverage['express/server.js'][120] = 0;
  _$jscoverage['express/server.js'][133] = 0;
  _$jscoverage['express/server.js'][134] = 0;
  _$jscoverage['express/server.js'][135] = 0;
  _$jscoverage['express/server.js'][138] = 0;
  _$jscoverage['express/server.js'][141] = 0;
  _$jscoverage['express/server.js'][143] = 0;
  _$jscoverage['express/server.js'][145] = 0;
  _$jscoverage['express/server.js'][146] = 0;
  _$jscoverage['express/server.js'][147] = 0;
  _$jscoverage['express/server.js'][149] = 0;
  _$jscoverage['express/server.js'][152] = 0;
  _$jscoverage['express/server.js'][176] = 0;
  _$jscoverage['express/server.js'][177] = 0;
  _$jscoverage['express/server.js'][178] = 0;
  _$jscoverage['express/server.js'][188] = 0;
  _$jscoverage['express/server.js'][189] = 0;
  _$jscoverage['express/server.js'][190] = 0;
  _$jscoverage['express/server.js'][202] = 0;
  _$jscoverage['express/server.js'][203] = 0;
  _$jscoverage['express/server.js'][204] = 0;
  _$jscoverage['express/server.js'][216] = 0;
  _$jscoverage['express/server.js'][217] = 0;
  _$jscoverage['express/server.js'][218] = 0;
  _$jscoverage['express/server.js'][230] = 0;
  _$jscoverage['express/server.js'][231] = 0;
  _$jscoverage['express/server.js'][232] = 0;
  _$jscoverage['express/server.js'][244] = 0;
  _$jscoverage['express/server.js'][245] = 0;
  _$jscoverage['express/server.js'][246] = 0;
  _$jscoverage['express/server.js'][247] = 0;
  _$jscoverage['express/server.js'][260] = 0;
  _$jscoverage['express/server.js'][261] = 0;
  _$jscoverage['express/server.js'][262] = 0;
  _$jscoverage['express/server.js'][263] = 0;
  _$jscoverage['express/server.js'][264] = 0;
  _$jscoverage['express/server.js'][265] = 0;
  _$jscoverage['express/server.js'][268] = 0;
  _$jscoverage['express/server.js'][269] = 0;
  _$jscoverage['express/server.js'][281] = 0;
  _$jscoverage['express/server.js'][282] = 0;
  _$jscoverage['express/server.js'][293] = 0;
  _$jscoverage['express/server.js'][294] = 0;
  _$jscoverage['express/server.js'][306] = 0;
  _$jscoverage['express/server.js'][307] = 0;
  _$jscoverage['express/server.js'][308] = 0;
  _$jscoverage['express/server.js'][320] = 0;
  _$jscoverage['express/server.js'][321] = 0;
  _$jscoverage['express/server.js'][322] = 0;
  _$jscoverage['express/server.js'][324] = 0;
  _$jscoverage['express/server.js'][325] = 0;
  _$jscoverage['express/server.js'][327] = 0;
  _$jscoverage['express/server.js'][332] = 0;
  _$jscoverage['express/server.js'][333] = 0;
  _$jscoverage['express/server.js'][334] = 0;
  _$jscoverage['express/server.js'][337] = 0;
  _$jscoverage['express/server.js'][338] = 0;
  _$jscoverage['express/server.js'][342] = 0;
  _$jscoverage['express/server.js'][343] = 0;
  _$jscoverage['express/server.js'][344] = 0;
  _$jscoverage['express/server.js'][345] = 0;
  _$jscoverage['express/server.js'][346] = 0;
  _$jscoverage['express/server.js'][347] = 0;
  _$jscoverage['express/server.js'][348] = 0;
  _$jscoverage['express/server.js'][350] = 0;
  _$jscoverage['express/server.js'][357] = 0;
  _$jscoverage['express/server.js'][358] = 0;
  _$jscoverage['express/server.js'][360] = 0;
  _$jscoverage['express/server.js'][365] = 0;
}
_$jscoverage['express/server.js'][12]++;
var url = require("url"), view = require("./view"), connect = require("connect"), utils = connect.utils, queryString = require("querystring"), router = require("connect/middleware/router");
_$jscoverage['express/server.js'][26]++;
var Server = exports = module.exports = (function Server(middleware) {
  _$jscoverage['express/server.js'][27]++;
  var self = this;
  _$jscoverage['express/server.js'][28]++;
  this.config = {};
  _$jscoverage['express/server.js'][29]++;
  this.settings = {};
  _$jscoverage['express/server.js'][30]++;
  this.redirects = {};
  _$jscoverage['express/server.js'][31]++;
  this.isCallbacks = {};
  _$jscoverage['express/server.js'][32]++;
  this.viewHelpers = {};
  _$jscoverage['express/server.js'][33]++;
  this.dynamicViewHelpers = {};
  _$jscoverage['express/server.js'][34]++;
  this.errorHandlers = [];
  _$jscoverage['express/server.js'][35]++;
  connect.Server.call(this, middleware || []);
  _$jscoverage['express/server.js'][38]++;
  this.set("home", "/");
  _$jscoverage['express/server.js'][41]++;
  if (process.env.EXPRESS_ENV) {
    _$jscoverage['express/server.js'][42]++;
    process.env.NODE_ENV = process.env.EXPRESS_ENV;
    _$jscoverage['express/server.js'][43]++;
    console.warn("\u001b[33mWarning\u001b[0m: EXPRESS_ENV is deprecated, use NODE_ENV.");
  }
  _$jscoverage['express/server.js'][47]++;
  this.showVersion = false;
  _$jscoverage['express/server.js'][50]++;
  this.set("env", process.env.NODE_ENV || "development");
  _$jscoverage['express/server.js'][53]++;
  this.use((function (req, res, next) {
  _$jscoverage['express/server.js'][54]++;
  req.query = {};
  _$jscoverage['express/server.js'][55]++;
  res.headers = {"X-Powered-By": "Express"};
  _$jscoverage['express/server.js'][56]++;
  req.app = res.app = self;
  _$jscoverage['express/server.js'][57]++;
  req.res = res;
  _$jscoverage['express/server.js'][58]++;
  res.req = req;
  _$jscoverage['express/server.js'][59]++;
  req.next = next;
  _$jscoverage['express/server.js'][61]++;
  if (req.url.indexOf("?") > 0) {
    _$jscoverage['express/server.js'][62]++;
    var query = url.parse(req.url).query;
    _$jscoverage['express/server.js'][63]++;
    req.query = exports.parseQueryString(query);
  }
  _$jscoverage['express/server.js'][65]++;
  next();
}));
  _$jscoverage['express/server.js'][69]++;
  var fn = router((function (app) {
  _$jscoverage['express/server.js'][69]++;
  self.routes = app;
}));
  _$jscoverage['express/server.js'][70]++;
  this.__defineGetter__("router", (function () {
  _$jscoverage['express/server.js'][71]++;
  this.__usedRouter = true;
  _$jscoverage['express/server.js'][72]++;
  return fn;
}));
});
_$jscoverage['express/server.js'][80]++;
Server.prototype.__proto__ = connect.Server.prototype;
_$jscoverage['express/server.js'][86]++;
exports.parseQueryString = queryString.parse;
_$jscoverage['express/server.js'][92]++;
Server.prototype.listen = (function () {
  _$jscoverage['express/server.js'][93]++;
  this.registerErrorHandlers();
  _$jscoverage['express/server.js'][94]++;
  connect.Server.prototype.listen.apply(this, arguments);
});
_$jscoverage['express/server.js'][101]++;
Server.prototype.listenFD = (function () {
  _$jscoverage['express/server.js'][102]++;
  this.registerErrorHandlers();
  _$jscoverage['express/server.js'][103]++;
  connect.Server.prototype.listenFD.apply(this, arguments);
});
_$jscoverage['express/server.js'][114]++;
Server.prototype.registerErrorHandlers = (function () {
  _$jscoverage['express/server.js'][115]++;
  this.errorHandlers.forEach((function (fn) {
  _$jscoverage['express/server.js'][116]++;
  this.use((function (err, req, res, next) {
  _$jscoverage['express/server.js'][117]++;
  fn.apply(this, arguments);
}));
}), this);
  _$jscoverage['express/server.js'][120]++;
  return this;
});
_$jscoverage['express/server.js'][133]++;
Server.prototype.use = (function (route, middleware) {
  _$jscoverage['express/server.js'][134]++;
  if (typeof route !== "string") {
    _$jscoverage['express/server.js'][135]++;
    middleware = route, route = "/";
  }
  _$jscoverage['express/server.js'][138]++;
  connect.Server.prototype.use.call(this, route, middleware);
  _$jscoverage['express/server.js'][141]++;
  if (middleware instanceof Server) {
    _$jscoverage['express/server.js'][143]++;
    var app = middleware, home = app.set("home");
    _$jscoverage['express/server.js'][145]++;
    if (home === "/") {
      _$jscoverage['express/server.js'][145]++;
      home = "";
    }
    _$jscoverage['express/server.js'][146]++;
    app.set("home", (app.route || "") + home);
    _$jscoverage['express/server.js'][147]++;
    app.parent = this;
    _$jscoverage['express/server.js'][149]++;
    if (app.__mounted) {
      _$jscoverage['express/server.js'][149]++;
      app.__mounted.call(app, this);
    }
  }
  _$jscoverage['express/server.js'][152]++;
  return this;
});
_$jscoverage['express/server.js'][176]++;
Server.prototype.mounted = (function (fn) {
  _$jscoverage['express/server.js'][177]++;
  this.__mounted = fn;
  _$jscoverage['express/server.js'][178]++;
  return this;
});
_$jscoverage['express/server.js'][188]++;
Server.prototype.register = (function () {
  _$jscoverage['express/server.js'][189]++;
  view.register.apply(this, arguments);
  _$jscoverage['express/server.js'][190]++;
  return this;
});
_$jscoverage['express/server.js'][202]++;
Server.prototype.helpers = (function (obj) {
  _$jscoverage['express/server.js'][203]++;
  utils.merge(this.viewHelpers, obj);
  _$jscoverage['express/server.js'][204]++;
  return this;
});
_$jscoverage['express/server.js'][216]++;
Server.prototype.dynamicHelpers = (function (obj) {
  _$jscoverage['express/server.js'][217]++;
  utils.merge(this.dynamicViewHelpers, obj);
  _$jscoverage['express/server.js'][218]++;
  return this;
});
_$jscoverage['express/server.js'][230]++;
Server.prototype.error = (function (fn) {
  _$jscoverage['express/server.js'][231]++;
  this.errorHandlers.push(fn);
  _$jscoverage['express/server.js'][232]++;
  return this;
});
_$jscoverage['express/server.js'][244]++;
Server.prototype.is = (function (type, fn) {
  _$jscoverage['express/server.js'][245]++;
  if (! fn) {
    _$jscoverage['express/server.js'][245]++;
    return this.isCallbacks[type];
  }
  _$jscoverage['express/server.js'][246]++;
  this.isCallbacks[type] = fn;
  _$jscoverage['express/server.js'][247]++;
  return this;
});
_$jscoverage['express/server.js'][260]++;
Server.prototype.set = (function (setting, val) {
  _$jscoverage['express/server.js'][261]++;
  if (val === undefined) {
    _$jscoverage['express/server.js'][262]++;
    if (this.settings.hasOwnProperty(setting)) {
      _$jscoverage['express/server.js'][263]++;
      return this.settings[setting];
    }
    else {
      _$jscoverage['express/server.js'][264]++;
      if (this.parent) {
        _$jscoverage['express/server.js'][265]++;
        return this.parent.set(setting);
      }
    }
  }
  else {
    _$jscoverage['express/server.js'][268]++;
    this.settings[setting] = val;
    _$jscoverage['express/server.js'][269]++;
    return this;
  }
});
_$jscoverage['express/server.js'][281]++;
Server.prototype.enable = (function (setting) {
  _$jscoverage['express/server.js'][282]++;
  return this.set(setting, true);
});
_$jscoverage['express/server.js'][293]++;
Server.prototype.disable = (function (setting) {
  _$jscoverage['express/server.js'][294]++;
  return this.set(setting, false);
});
_$jscoverage['express/server.js'][306]++;
Server.prototype.redirect = (function (key, url) {
  _$jscoverage['express/server.js'][307]++;
  this.redirects[key] = url;
  _$jscoverage['express/server.js'][308]++;
  return this;
});
_$jscoverage['express/server.js'][320]++;
Server.prototype.configure = (function (env, fn) {
  _$jscoverage['express/server.js'][321]++;
  if (typeof env === "function") {
    _$jscoverage['express/server.js'][322]++;
    fn = env, env = "all";
  }
  _$jscoverage['express/server.js'][324]++;
  if (env === "all" || this.set("env") === env) {
    _$jscoverage['express/server.js'][325]++;
    fn.call(this);
  }
  _$jscoverage['express/server.js'][327]++;
  return this;
});
_$jscoverage['express/server.js'][332]++;
(function (method) {
  _$jscoverage['express/server.js'][333]++;
  Server.prototype[method] = (function (path, fn) {
  _$jscoverage['express/server.js'][334]++;
  var self = this;
  _$jscoverage['express/server.js'][337]++;
  if (! this.__usedRouter) {
    _$jscoverage['express/server.js'][338]++;
    this.use(this.router);
  }
  _$jscoverage['express/server.js'][342]++;
  if (arguments.length > 2) {
    _$jscoverage['express/server.js'][343]++;
    var args = Array.prototype.slice.call(arguments, 1);
    _$jscoverage['express/server.js'][344]++;
    fn = args.pop();
    _$jscoverage['express/server.js'][345]++;
    (function stack(middleware) {
  _$jscoverage['express/server.js'][346]++;
  middleware.forEach((function (fn) {
  _$jscoverage['express/server.js'][347]++;
  if (Array.isArray(fn)) {
    _$jscoverage['express/server.js'][348]++;
    stack(fn);
  }
  else {
    _$jscoverage['express/server.js'][350]++;
    self[method](path, fn);
  }
}));
})(args);
  }
  _$jscoverage['express/server.js'][357]++;
  this.routes[method](path, fn);
  _$jscoverage['express/server.js'][358]++;
  return this;
});
  _$jscoverage['express/server.js'][360]++;
  return arguments.callee;
})("get")("post")("put")("delete");
_$jscoverage['express/server.js'][365]++;
Server.prototype.del = Server.prototype["delete"];
_$jscoverage['express/server.js'].source = ["","/*!"," * Express - Server"," * Copyright(c) 2010 TJ Holowaychuk &lt;tj@vision-media.ca&gt;"," * MIT Licensed"," */","","/**"," * Module dependencies."," */","","var url = require('url')","  , view = require('./view')","  , connect = require('connect')","  , utils = connect.utils","  , queryString = require('querystring')","  , router = require('connect/middleware/router');","","/**"," * Initialize a new `Server` with optional `middleware`."," *"," * @param {Array} middleware"," * @api public"," */","","var Server = exports = module.exports = function Server(middleware){","  var self = this;","  this.config = {};","  this.settings = {};","  this.redirects = {};","  this.isCallbacks = {};","  this.viewHelpers = {};","  this.dynamicViewHelpers = {};","  this.errorHandlers = [];","  connect.Server.call(this, middleware || []);","","  // Default \"home\" to / ","  this.set('home', '/');","","  // DEPRECATED: remove in 1.0","  if (process.env.EXPRESS_ENV) {","    process.env.NODE_ENV = process.env.EXPRESS_ENV;","    console.warn('\\x1b[33mWarning\\x1b[0m: EXPRESS_ENV is deprecated, use NODE_ENV.');","  }","","  // TODO: remove when Connect removes \"Server\" ...","  this.showVersion = false;","","  // Set \"env\" to NODE_ENV, defaulting to \"development\"","  this.set('env', process.env.NODE_ENV || 'development');","","  // Expose objects to each other","  this.use(function(req, res, next){","    req.query = {};","    res.headers = { 'X-Powered-By': 'Express' };","    req.app = res.app = self;","    req.res = res;","    res.req = req;","    req.next = next;","    // Assign req.params.get","    if (req.url.indexOf('?') &gt; 0) {","      var query = url.parse(req.url).query;","      req.query = exports.parseQueryString(query);","    }","    next();","  });","","  // Use router, expose as app.get(), etc","  var fn = router(function(app){ self.routes = app; });","  this.__defineGetter__('router', function(){","    this.__usedRouter = true;","    return fn;","  });","};","","/**"," * Inherit from `connect.Server`."," */","","Server.prototype.__proto__ = connect.Server.prototype;","","/**"," * Support swappable querystring parsers."," */","","exports.parseQueryString = queryString.parse;","","/**"," * Proxy in order to register error handlers."," */","","Server.prototype.listen = function(){","  this.registerErrorHandlers();","  connect.Server.prototype.listen.apply(this, arguments);","};","","/**"," * Proxy in order to register error handlers."," */","","Server.prototype.listenFD = function(){","  this.registerErrorHandlers();","  connect.Server.prototype.listenFD.apply(this, arguments);","};","","/**"," * Register error handlers. This is automatically"," * called from within `Server#listen()` and `Server#listenFD()`."," *"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.registerErrorHandlers = function(){","  this.errorHandlers.forEach(function(fn){","    this.use(function(err, req, res, next){","      fn.apply(this, arguments);","    });","  }, this);","  return this;","};","","/**"," * Proxy `connect.Server#use()` to apply settings to"," * mounted applications."," *"," * @param {String|Function|Server} route"," * @param {Function|Server} middleware"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.use = function(route, middleware){","  if (typeof route !== 'string') {","    middleware = route, route = '/';","  }","","  connect.Server.prototype.use.call(this, route, middleware);","","  // Mounted an app","  if (middleware instanceof Server) {","    // Home is /:route/:home","    var app = middleware","      , home = app.set('home');","    if (home === '/') home = '';","    app.set('home', (app.route || '') + home);","    app.parent = this;","    // Mounted hook","    if (app.__mounted) app.__mounted.call(app, this);","  }","","  return this;","};","","/**"," * Assign a callback `fn` which is called"," * when this `Server` is passed to `Server#use()`."," *"," * Examples:"," *"," *    var app = express.createServer(),"," *        blog = express.createServer();"," *"," *    blog.mounted(function(parent){"," *        // parent is app"," *        // \"this\" is blog"," *    });"," *"," *    app.use(blog);"," *"," * @param {Function} fn"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.mounted = function(fn){","  this.__mounted = fn;","  return this;","};","","/**"," * See: view.register."," *"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.register = function(){","  view.register.apply(this, arguments);","  return this;","};","","/**"," * Register the given view helpers `obj`. This method"," * can be called several times to apply additional helpers."," *"," * @param {Object} obj"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.helpers = function(obj){","  utils.merge(this.viewHelpers, obj);","  return this;","};","","/**"," * Register the given dynamic view helpers `obj`. This method"," * can be called several times to apply additional helpers."," *"," * @param {Object} obj"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.dynamicHelpers = function(obj){","  utils.merge(this.dynamicViewHelpers, obj);","  return this;","};","","/**"," * Assign a custom exception handler callback `fn`."," * These handlers are always _last_ in the middleware stack."," *"," * @param {Function} fn"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.error = function(fn){","  this.errorHandlers.push(fn);","  return this;","};","","/**"," * Register the given callback `fn` for the given `type`."," *"," * @param {String} type"," * @param {Function} fn"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.is = function(type, fn){","  if (!fn) return this.isCallbacks[type];","  this.isCallbacks[type] = fn;","  return this;","};","","/**"," * Assign `setting` to `val`, or return `setting`'s value."," * Mounted servers inherit their parent server's settings."," *"," * @param {String} setting"," * @param {String} val"," * @return {Server|Mixed} for chaining, or the setting value"," * @api public"," */","","Server.prototype.set = function(setting, val){","  if (val === undefined) {","    if (this.settings.hasOwnProperty(setting)) {","      return this.settings[setting];","    } else if (this.parent) {","      return this.parent.set(setting);","    }","  } else {","    this.settings[setting] = val;","    return this;","  }","};","","/**"," * Enable `setting`."," *"," * @param {String} setting"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.enable = function(setting){","  return this.set(setting, true);","};","","/**"," * Disable `setting`."," *"," * @param {String} setting"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.disable = function(setting){","  return this.set(setting, false);","};","","/**"," * Redirect `key` to `url`."," *"," * @param {String} key"," * @param {String} url"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.redirect = function(key, url){","  this.redirects[key] = url;","  return this;","};","","/**"," * Configure callback for the given `env`."," *"," * @param {String} env"," * @param {Function} fn"," * @return {Server} for chaining"," * @api public"," */","","Server.prototype.configure = function(env, fn){","  if (typeof env === 'function') {","    fn = env, env = 'all';","  }","  if (env === 'all' || this.set('env') === env) {","    fn.call(this);","  }","  return this;","};","","// Generate routing methods","","(function(method){","  Server.prototype[method] = function(path, fn){","    var self = this;","","    // Ensure router is mounted","    if (!this.__usedRouter) {","      this.use(this.router);","    }","","    // Route specific middleware support","    if (arguments.length &gt; 2) {","      var args = Array.prototype.slice.call(arguments, 1);","      fn = args.pop();","      (function stack(middleware){","        middleware.forEach(function(fn){","          if (Array.isArray(fn)) {","            stack(fn);","          } else {","            self[method](path, fn);","          }","        });","      })(args);","    }","","    // Generate the route","    this.routes[method](path, fn);","    return this;","  };","  return arguments.callee;","})('get')('post')('put')('delete');","","// Alias delete as \"del\"","","Server.prototype.del = Server.prototype.delete;"];
